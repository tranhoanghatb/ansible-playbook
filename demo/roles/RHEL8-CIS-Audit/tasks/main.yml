---
# tasks file for RHEL8-CIS

- name: Check OS version and family
  when:
      - os_check
  tags:
      - always
  ansible.builtin.assert:
      that: (ansible_distribution != 'CentOS' and ansible_os_family == 'RedHat' or ansible_os_family == "Rocky") and ansible_distribution_major_version is version_compare('8', '==')
      fail_msg: "This role can only be run against Supported OSs. {{ ansible_facts.distribution }} {{ ansible_facts.distribution_major_version }} is not supported."
      success_msg: "This role is running against a supported OS {{ ansible_facts.distribution }} {{ ansible_distribution_major_version }}"

- name: Check ansible version
  tags:
      - always
  ansible.builtin.assert:
      that: ansible_version.full is version_compare(min_ansible_version, '>=')
      fail_msg: "You must use Ansible {{ min_ansible_version }} or greater"
      success_msg: "This role is running a supported version of ansible {{ ansible_version.full }} >= {{ min_ansible_version }}"

- name: Check crypto-policy input
  when:
      - rhel8cis_rule_1_6_1
  tags:
      - rule_1.6.1
  ansible.builtin.assert:
      that: rhel8cis_crypto_policy in rhel8cis_allowed_crypto_policies

- name: Check crypto-policy module input
  when:
      - rhel8cis_rule_1_6_1
      - rhel8cis_crypto_policy_module | length > 0
  tags:
      - rule_1.6.1
  ansible.builtin.assert:
      that: rhel8cis_crypto_policy_module in rhel8cis_allowed_crypto_policies_modules

- name: Check rhel8cis_bootloader_password_hash variable has been changed
  when:
      - rhel8cis_set_boot_pass
      - rhel8cis_rule_1_4_1
  tags:
      - always
  ansible.builtin.assert:
      that: rhel8cis_bootloader_password_hash.find('grub.pbkdf2.sha512') != -1 and rhel8cis_bootloader_password_hash != 'grub.pbkdf2.sha512.changethispassword'  # pragma: allowlist secret
      msg: "This role will not be able to run single user password commands as rhel8cis_bootloader_password_hash variable has not been set correctly"  # pragma: allowlist secret

- name: Ensure root password is set
  when:
      - rhel8cis_rule_4_5_2_4
  tags:
      - always
  block:
      - name: Ensure root password is set
        ansible.builtin.shell: passwd -S root | grep -E "(Password set, SHA512 crypt|Password locked|root\s(LK|L)\s)"
        changed_when: false
        failed_when: false
        register: discovered_root_passwd_set

      - name: Ensure root password is set
        ansible.builtin.assert:
            that: discovered_root_passwd_set.rc == 0
            fail_msg: "You have rule 4.5.2.4 enabled this requires that you have a root password set"
            success_msg: "You have a root password set"

- name: Setup rules if container
  when:
      - ansible_connection == 'docker' or
        ansible_facts.virtualization_type in ["docker", "lxc", "openvz", "podman", "container"]
  tags:
      - container_discovery
      - always
  block:
      - name: Discover and set container variable if required
        ansible.builtin.set_fact:
            system_is_container: true

      - name: Load variable for container
        ansible.builtin.include_vars:
            file: "{{ container_vars_file }}"

      - name: Output if discovered is a container
        when:
            - system_is_container
        ansible.builtin.debug:
            msg: system has been discovered as a container

- name: "Check password set for {{ ansible_user }}"
  when:
      - ansible_env.SUDO_USER is defined
      - not system_is_ec2
      - not audit_only
      - rhel8cis_rule_4_3_4
  block:
      - name: Capture current password state of connecting user"
        ansible.builtin.shell: "grep {{ ansible_env.SUDO_USER }} /etc/shadow | awk -F: '{print $2}'"
        changed_when: false
        failed_when: false
        check_mode: false
        register: discovered_ansible_user_password_set

      - name: "Assert that password set for {{ ansible_env.SUDO_USER }} and account not locked"
        ansible.builtin.assert:
            that: discovered_ansible_user_password_set.stdout | length != 0 and discovered_ansible_user_password_set.stdout != "!!"
            fail_msg: "You have {{ sudo_password_rule }} enabled but the user = {{ ansible_env.SUDO_USER }} has no password set - It can break access"
            success_msg: "You have a password set for the {{ ansible_env.SUDO_USER }} user"
        vars:
            sudo_password_rule: rhel8cis_rule_4_3_4  # pragma: allowlist secret

- name: Include prelim tasks
  tags:
      - prelim_tasks
      - run_audit
  ansible.builtin.import_tasks:
      file: prelim.yml



- name: Run auditd logic
  when:
      - update_audit_template
  tags:
      - always
  ansible.builtin.import_tasks:
      file: auditd.yml


- name: Run post_remediation audit
  when:
      - run_audit
  tags:
      - run_audit
  ansible.builtin.import_tasks:
      file: post_remediation_audit.yml

        ####copy result to ansible server

- name: Audit_Only | Create local Directories for hosts
  when: fetch_audit_files
  ansible.builtin.file:
      mode: '0755'
      path: "{{ audit_capture_files_dir }}/{{ inventory_hostname }}"
      recurse: true
      state: directory
  delegate_to: localhost
  become: false

- name: Audit_only | Get audits from systems and put in group dir
  when: fetch_audit_files
  ansible.builtin.fetch:
      dest: "{{ audit_capture_files_dir }}/{{ inventory_hostname }}/"
      flat: true
      mode: '0644'
      src: "{{ pre_audit_outfile }}"

- name: Show Audit Summary
  when:
      - run_audit
  tags:
      - run_audit
  ansible.builtin.debug:
      msg: "{{ audit_results.split('\n') }}"

